<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <parent>
    <artifactId>demoproject</artifactId>
    <groupId>com.company.project</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <modelVersion>4.0.0</modelVersion>

  <groupId>com.company.project</groupId>
  <artifactId>demoproject-service</artifactId>
  <version>1.0-SNAPSHOT</version>

  <packaging>jar</packaging>


	<dependencies>
		

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-logging</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>		
		<!-- dataSource -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid-spring-boot-starter</artifactId>
		</dependency>
		
		<!--
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		-->
		<dependency>
		    <groupId>jakarta.persistence</groupId>
		    <artifactId>jakarta.persistence-api</artifactId>
		    <version>2.2.3</version>
		</dependency>		

		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>		
		
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
				
		<dependency>
			<groupId>org.springframework</groupId>
  		    <artifactId>spring-context-support</artifactId>
		</dependency>			
		
		
		
	
		<dependency>
		    <groupId>com.baomidou</groupId>
		    <artifactId>mybatis-plus-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-generator</artifactId>
		</dependency>		
		<!-- 处理mybatis-plus不支持联合主键的问题 -->
		<dependency>
	        <groupId>com.github.jeffreyning</groupId>
	        <artifactId>mybatisplus-plus</artifactId>
	        <version>1.7.4-RELEASE</version>
	    </dependency>    
	    <!-- 
	    mybatis支持多数据源: https://baomidou.com/guides/dynamic-datasource/ 
	    数据源配置建议在Mapper interface上 @DS("dataSourceName")
	    -->
		<dependency>
		    <groupId>com.baomidou</groupId>
		    <artifactId>dynamic-datasource-spring-boot-starter</artifactId>
		    <version>4.3.1</version>
		</dependency>		    
	    
				

		<!-- test BEGIN -->
		<dependency>
			<groupId>org.dbunit</groupId>
			<artifactId>dbunit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
				  <groupId>org.junit.jupiter</groupId>
				  <artifactId>junit-jupiter</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.junit.jupiter</groupId>
					<artifactId>junit-jupiter-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>			
		<!-- for test HibernateValidator -->



	    
	    
        <!-- swagger3 ui文档,访问: http://localhost:7070/swagger-ui/index.html -->
      	<dependency>
		    <groupId>org.thingsboard</groupId>
		    <artifactId>springfox-boot-starter</artifactId>
		    <version>3.0.1</version>
		</dependency>

		<dependency>
			<groupId>com.github.rapid.common</groupId>
			<artifactId>rapid-common-util</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.rapid.common</groupId>
			<artifactId>rapid-common-web</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.rapid.common</groupId>
			<artifactId>rapid-common-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.rapid.common</groupId>
			<artifactId>rapid-common-mvc</artifactId>
		</dependency>







				
		<dependency>
		    <groupId>com.squareup.okhttp3</groupId>
		    <artifactId>okhttp</artifactId>
		    <version>4.12.0</version>
		</dependency>
		

		<!-- apache-commons BEGIN -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-pool</groupId>
			<artifactId>commons-pool</artifactId>
		</dependency>


		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>


		<!-- xml begin -->
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
		</dependency>
		<!-- xml end -->


		<!-- excel -->
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>easyexcel</artifactId>
		</dependency>
		
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
						      
	  <!-- 

		spring-boot-starter-mail
		spring-boot-starter-data-redis
		spring-boot-starter-data-elasticsearch
		spring-boot-starter-jdbc
		spring-boot-starter-websocket
		spring-boot-starter-log4j2
		
		
			  
		Spring Boot application starters
		spring-boot-starter-thymeleaf
		使用Thymeleaf视图构建MVC Web应用程序
		
		spring-boot-starter-data-couchbase
		Starter for using Couchbase document-oriented database and Spring Data Couchbase
		
		spring-boot-starter-artemis
		使用Apache Artemis启动JMS消息传递
		
		spring-boot-starter-web-services
		使用Spring Web服务
		
		spring-boot-starter-mail
		支持使用Java Mail和Spring Framework发送电子邮件
		
		spring-boot-starter-data-redis
		使用Redis键值数据存储与Spring Data Redis和Jedis客户端
		
		spring-boot-starter-web
		启动器构建web，包括RESTful，使用Spring MVC的应用程序。使用Tomcat作为默认嵌入式容器
		
		spring-boot-starter-data-gemfire
		Starter for using GemFire distributed data store and Spring Data GemFire
		
		spring-boot-starter-activemq
		使用Apache ActiveMQ启动JMS消息传递
		
		spring-boot-starter-data-elasticsearch
		使用Elasticsearch搜索和分析引擎和Spring Data Elasticsearch
		
		spring-boot-starter-integration
		Starter for using Spring Integration
		
		spring-boot-starter-test
		Spring Boot应用程序用于测试包括JUnit，Hamcrest和Mockito
		
		spring-boot-starter-jdbc
		使用JDBC与Tomcat JDBC连接池
		
		spring-boot-starter-mobile
		使用Spring Mobile构建Web应用程序的入门
		
		spring-boot-starter-validation
		使用Java Bean校验与Hibernate校验器
		
		spring-boot-starter-hateoas
		使用Spring MVC和Spring HATEOAS构建基于超媒体的RESTful Web应用程序的入门
		
		spring-boot-starter-jersey
		使用JAX-RS和Jersey构建RESTful Web应用程序的入门。 spring-boot-starter-web的替代品
		
		spring-boot-starter-data-neo4j
		使用Neo4j图数据库和Spring Data Neo4j
		
		spring-boot-starter-websocket
		使用Spring Framework的WebSocket支持构建WebSocket应用程序
		
		spring-boot-starter-aop
		使用Spring AOP和AspectJ进行面向方面编程
		
		spring-boot-starter-amqp
		使用Spring AMQP和Rabbit MQ的入门
		
		spring-boot-starter-data-cassandra
		使用Cassandra分布式数据库和Spring Data Cassandra
		
		spring-boot-starter-social-facebook
		使用Spring Social Facebook
		
		spring-boot-starter-jta-atomikos
		使用Atomikos进行JTA事务
		
		spring-boot-starter-security
		使用Spring Security
		
		spring-boot-starter-mustache
		使用Mustache视图构建MVC Web应用程序
		
		spring-boot-starter-data-jpa
		使用Spring Data JPA与Hibernate
		
		spring-boot-starter
		核心启动器，包括自动配置支持，日志记录和YAML
		
		spring-boot-starter-groovy-templates
		使用Groovy模板视图构建MVC Web应用程序
		
		spring-boot-starter-freemarker
		使用FreeMarker视图构建MVC Web应用程序
		
		spring-boot-starter-batch
		使用Spring Batch
		
		spring-boot-starter-cache
		支持使用Spring Framework的缓存
		
		spring-boot-starter-data-solr
		使用带有Spring Data Solr的Apache Solr搜索平台
		
		spring-boot-starter-data-mongodb
		使用MongoDB和Spring Data MongoDB
		
		spring-boot-starter-jooq
		使用jOOQ访问SQL数据库。 spring-boot-starter-data-jpa或spring-boot-starter-jdbc的替代方法
		
		spring-boot-starter-jta-narayana
		Spring Boot启动Narayana JTA
		
		spring-boot-starter-cloud-connectors
		启动者使用Spring Cloud连接器，简化了连接到云平台中的服务，如Cloud Foundry和Heroku
		
		spring-boot-starter-jta-bitronix
		使用Bitronix进行JTA事务
		
		spring-boot-starter-data-rest
		使用Spring Data REST通过REST暴露Spring数据存储库
		
		Spring Boot production starters
		spring-boot-starter-actuator
		使用Spring Boot的Actuator，提供生产就绪的功能，以帮助您监视和管理您的应用程序
		
		spring-boot-starter-remote-shell
		使用CRaSH远程shell通过SSH监视和管理您的应用程序
		
		Spring Boot technical starters
		spring-boot-starter-undertow
		使用Undertow作为嵌入式servlet容器。 spring-boot-starter-tomcat的替代方法
		
		spring-boot-starter-jetty
		使用Jetty作为嵌入式servlet容器的。 spring-boot-starter-tomcat的替代方法
		
		spring-boot-starter-logging
		使用Logback进行日志记录。 默认日志启动器
		
		spring-boot-starter-tomcat
		使用Tomcat作为嵌入式servlet容器。 spring-boot-starter-web使用的默认servlet容器
		
		spring-boot-starter-log4j2
		使用Log4j2进行日志记录。 spring-boot-starter-logging的替代方法	  
	   -->	
	</dependencies>
	
</project>